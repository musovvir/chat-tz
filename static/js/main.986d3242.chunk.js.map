{"version":3,"sources":["components/Header/index.jsx","components/Chat/OutMessage/index.jsx","components/Chat/SendMessage/ButtonSend.jsx","components/Chat/SendMessage/ButtonScrip.jsx","redux/reducers/chat.jsx","utils/Scroll.js","components/Chat/SendMessage/index.jsx","components/Chat/index.jsx","App.js","redux/configureStore.jsx","index.js"],"names":["Header","props","className","OutMessage","message","dayjs","date","format","ButtonSend","sentMessage","CSSTransition","timeout","classNames","onClick","ButtonScrip","initialState","loading","messages","sendMessage","dispatch","type","payload","Date","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","chatWindow","document","getElementById","scrollTop","scrollHeight","scrollChatDown","SendMessage","useDispatch","useSelector","state","chat","useHotkeys","e","preventDefault","placeholder","value","onChange","getMessage","target","length","Chat","useEffect","id","map","index","App","logger","createLogger","collapsed","diff","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","process"],"mappings":"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","file":"static/js/main.986d3242.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header-name\">\r\n                Чат\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport dayjs from \"dayjs\";\n\nfunction OutMessage(props) {\n  return (\n    <div className=\"out\">\n      <div className=\"outMessage\">\n        {props.message.message}\n        <div className=\"date\">{dayjs(props.message.date).format(\"hh:mm\")}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default OutMessage;\n","import React from \"react\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport MicIcon from \"@material-ui/icons/Mic\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction ButtonSend({ message, sentMessage }) {\n  return (\n    <div className=\"buttonSend\">\n        <CSSTransition key={message} timeout={100} classNames=\"sendIcon\">\n            { /** Смени иконок при вводе сообщения **/}\n          <i className=\"material-icons microphone\">\n            {message ? (\n              <SendIcon className=\"sendButton\" onClick={sentMessage} />\n            ) : (\n              <MicIcon className=\"micIcon\" />\n            )}\n          </i>\n        </CSSTransition>\n    </div>\n  );\n}\n\nexport default ButtonSend;\n","import React from 'react';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\n\r\nfunction ButtonScrip(props) {\r\n    return (\r\n        <div>\r\n            <AttachFileIcon className=\"buttonScrip\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ButtonScrip;","import { scrollChatDown } from \"../../utils/Scroll\";\n\n/**\n * Стейт с данными чатов и сообщенй и с состоянием их загрузки\n * @type {{loading: boolean, messages: [], message: string}}\n */\n\nconst initialState = {\n  loading: false,\n  messages: [],\n  message: \"\",\n};\n\n/**\n * Основной редюсер с кейсами данных и их загрузки\n * @param state\n * @param action\n * @returns {{loading: boolean, messages: *[], loading: boolean, items: }}\n */\n\nexport default function chat(state = initialState, action) {\n  switch (action.type) {\n    case \"load/message/start\":\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case \"load/message/success\":\n      return {\n        ...state,\n        messages: action.payload,\n      };\n\n    case \"send/message/start\":\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n\n    case \"get/message\":\n      return {\n        ...state,\n        message: action.payload,\n      };\n\n    case \"clear/input\":\n      return {\n        ...state,\n        message: \"\",\n      };\n\n    default:\n      return state;\n  }\n}\n\n/**\n * Загрузка сообщений\n * @returns {function(...[*]=)}\n */\n\nexport function loadMessages() {\n  return (dispatch) => {\n    dispatch({ type: \"load/message/start\" });\n\n    fetch(\"/messages\")\n      .then((response) => response.json())\n      .then((json) => {\n        dispatch({\n          type: \"load/message/success\",\n          payload: json,\n        });\n      });\n  };\n}\n\n/**\n * Добавление нового сообщения\n * @param message\n * @returns {function(...[*]=)}\n */\n\nexport function sendMessage(message) {\n  return (dispatch) => {\n    dispatch({\n      type: \"send/message/start\",\n      payload: { message, date: new Date(), type: \"text\" },\n    });\n    fetch(\"/messages\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        message,\n        date: new Date(),\n        type: \"text\",\n      }),\n    })\n      .then((response) => response.json())\n      .then(() => {\n        dispatch({\n          type: \"send/message/success\",\n        });\n        scrollChatDown();\n      });\n    dispatch({ type: \"clear/input\" });\n  };\n}\n\n/**\n * Сохранение значения поля ввода\n * @param message\n * @returns {{type: string}}\n */\nexport function getMessage(message) {\n  return { type: \"get/message\", payload: message };\n}\n","export const scrollChatDown = () => {\r\n    const chatWindow = document.getElementById(\"chat-window\");\r\n    if (chatWindow) {\r\n        chatWindow.scrollTop = chatWindow.scrollHeight;\r\n    }\r\n};","import React from \"react\";\nimport ButtonSend from \"./ButtonSend\";\nimport ButtonScrip from \"./ButtonScrip\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getMessage, sendMessage } from \"../../../redux/reducers/chat\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\n\nfunction SendMessage(props) {\n  /** Хук редакса **/\n  const dispatch = useDispatch();\n\n  /** Значение поля ввода **/\n  const message = useSelector((state) => state.chat.message);\n\n  /** Обработчик для поля ввода **/\n  const handleChange = (e) => {\n    dispatch(getMessage(e.target.value));\n  };\n\n  /** Функция оправки сообщения **/\n  const sentMessage = () => {\n    dispatch(sendMessage(message));\n  };\n\n  /**\n   * Добавление сообщения при нажатии на enter\n   */\n  useHotkeys(\n    \"enter\",\n    (e) => {\n      e.preventDefault();\n      sentMessage();\n    },\n    [message]\n  );\n\n  return (\n    <div className=\"send\">\n      <input\n        type=\"text\"\n        placeholder=\"Введите сообщение...\"\n        value={message}\n        onChange={handleChange}\n        className=\"sendInput\"\n      />\n      <ButtonScrip />\n      <ButtonSend sentMessage={sentMessage} message={message?.length > 0} />\n    </div>\n  );\n}\n\nexport default SendMessage;\n","import React from \"react\";\nimport OutMessage from \"./OutMessage\";\nimport SendMessage from \"./SendMessage\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { loadMessages } from \"../../redux/reducers/chat\";\n\nfunction Chat() {\n  /** Хук редакса **/\n  const dispatch = useDispatch();\n\n  /** Массив с сообщениями **/\n  const messages = useSelector((state) => state.chat.messages);\n\n  /** Загрузка данных при загрузке компонента**/\n  useEffect(() => {\n    dispatch(loadMessages());\n  }, [dispatch]);\n\n  return (\n    <div className=\"chat\" id=\"chat-window\">\n      {messages.map((message, index) => {\n        return <OutMessage key={index} message={message} />;\n      })}\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Chat from \"./components/Chat\";\nimport SendMessage from \"./components/Chat/SendMessage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Chat />\n      <SendMessage />\n    </div>\n  );\n}\n\nexport default App;\n","import { createLogger } from \"redux-logger/src\";\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport chat from \"./reducers/chat\";\r\n\r\n/**\r\n * Настройка логгера\r\n * @type {function(...[*]=)}\r\n */\r\nconst logger = createLogger({\r\n    collapsed: true,\r\n    diff: true,\r\n});\r\n\r\n/**\r\n * Создание комбайн редюсера\r\n * @type {function(...[*]=)}\r\n */\r\nconst reducers = combineReducers({\r\n    chat\r\n});\r\n\r\n/**\r\n * Создание настройка стора\r\n * @type {*}\r\n */\r\nexport const store = createStore(reducers, applyMiddleware(thunk, logger));","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./styles.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/configureStore\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}